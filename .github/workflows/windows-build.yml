name: Windows Builds

on:
  push:
    branches:
      - add-win-workflow

jobs:
  deps:
    name: Download SDK
    runs-on: windows-latest
    strategy:
      matrix:
        targetplatform: [x64]
    env:
      TARGETPLATFORM: ${{ matrix.targetplatform }}
      VS_VERSION: Visual Studio 16
      VS_VER: 2019
      MSVC_VER: 1920
      SDK: release-1911
      GDAL_VERSION: 3.2.2
      PROJ_VERSION: 7.2.1
      OSGEO_URL: http://download.osgeo.org
    steps:
      - name: setup environment
        shell: pwsh
        run: |
            if("${{ matrix.targetplatform }}" -eq "x64") {$env:SDK_ARCH="-x64"} else {$env:SDK_ARCH=""}
            $env:SDK_ZIP="$env:SDK$env:SDK_ARCH-dev.zip"
            $env:SDK_URL="http://download.gisinternals.com/sdk/downloads/$env:SDK_ZIP"
            $env:SDK_PREFIX="$env:GITHUB_WORKSPACE\sdk\$env:SDK$env:SDK_ARCH"
            $env:PROJ_ZIP="proj-$env:PROJ_VERSION.zip"
            $env:PROJ_URL="$env:OSGEO_URL/proj/$env:PROJ_ZIP"
            $gdalversionstripped = $env:GDAL_VERSION -replace "\."
            $env:GDAL_ZIP="gdal$gdalversionstripped.zip"
            $env:GDAL_URL="$env:OSGEO_URL/gdal/$env:GDAL_VERSION/$env:GDAL_ZIP"
            echo "SDK_PREFIX=$env:SDK_PREFIX" >> $env:GITHUB_ENV
            echo "SDK_ARCH=$env:SDK_ARCH" >> $env:GITHUB_ENV
            echo "SDK_ZIP=$env:SDK_ZIP" >> $env:GITHUB_ENV
            echo "SDK_URL=$env:SDK_URL" >> $env:GITHUB_ENV
            echo "PROJ_ZIP=$env:PROJ_ZIP" >> $env:GITHUB_ENV
            echo "PROJ_URL=$env:PROJ_URL" >> $env:GITHUB_ENV
            echo "GDAL_ZIP=$env:GDAL_ZIP" >> $env:GITHUB_ENV
            echo "GDAL_URL=$env:GDAL_URL" >> $env:GITHUB_ENV
            if("${{ matrix.targetplatform }}" -eq "x86")
            {
                $env:ARCHITECTURE="x86"
                $env:WIN64_ARG=""
                $env:CMAKE_ARCHITECTURE="Win32"
            }
            else
            {
                $env:ARCHITECTURE="amd64"
                $env:WIN64_ARG="WIN64=YES"
                $env:CMAKE_ARCHITECTURE="x64"
            }
            echo "ARCHITECTURE=$env:ARCHITECTURE" >> $env:GITHUB_ENV
            echo "WIN64_ARG=$env:WIN64_ARG" >> $env:GITHUB_ENV
            echo "CMAKE_ARCHITECTURE=$env:CMAKE_ARCHITECTURE" >> $env:GITHUB_ENV
      - name: set compiler environment
        shell: cmd
        run: |
            if "%VS_VER%" == "2019" CALL "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=%ARCHITECTURE%
            echo PATH=%PATH%>> %GITHUB_ENV%
            echo INCLUDE=%INCLUDE%>> %GITHUB_ENV%
            echo LIB=%LIB%>> %GITHUB_ENV%
            echo LIBPATH=%LIBPATH%>> %GITHUB_ENV%
      - name: get cache dirs
        id: get-cache-dirs
        run: |
          echo "::set-output name=gisinternals-dir::$env:GITHUB_WORKSPACE\sdk"
          echo "::set-output name=proj-dir::$env:GITHUB_WORKSPACE\proj-install"
          echo "::Set-output name=gdal-dir::$env:GITHUB_WORKSPACE\gdal-install"
      - name: cache deps
        uses: actions/cache@v2
        id: cache-deps
        with:
          path: |
            ${{ steps.get-cache-dirs.outputs.gisinternals-dir }}
          key: ${{ runner.os }}-${{ matrix.targetplatform }}-v4
      - name: download deps
        # if: steps.cache-deps.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
            if(-Not (Test-Path -Path downloads)) { mkdir downloads }
            cd downloads
            if(-Not (Test-Path -Path $env:SDK_ZIP )) { Invoke-WebRequest "$env:SDK_URL" -OutFile "$env:SDK_ZIP" }
            if(-Not (Test-Path -Path $env:PROJ_ZIP )) { Invoke-WebRequest "$env:PROJ_URL" -OutFile "$env:PROJ_ZIP" }
            if(-Not (Test-Path -Path $env:GDAL_ZIP )) { Invoke-WebRequest "$env:GDAL_URL" -OutFile "$env:GDAL_ZIP" }
            cd ..
            if(-Not (Test-Path -Path sdk)) { mkdir sdk }
            if(-Not (Test-Path -Path proj-build)) { mkdir proj-build }
            if(-Not (Test-Path -Path gdal-build)) { mkdir gdal-build }
            cd sdk
            7z x ..\downloads\$env:SDK_ZIP
            cd ..\proj-build
            7z x ..\downloads\$env:PROJ_ZIP
            Copy-Item -Path "$($env:PROJ_ZIP -replace ".zip")/*" -Destination "." -Recurse
            Remove-Item "$($env:PROJ_ZIP -replace ".zip")" -Recurse
            cd ..\gdal-build
            7z x ..\downloads\$env:GDAL_ZIP
            Copy-Item -Path "gdal-$env:GDAL_VERSION/*" -Destination "." -Recurse
            Remove-Item "gdal-$env:GDAL_VERSION" -Recurse
            dir $env:GITHUB_WORKSPACE\proj-build
            dir $env:GITHUB_WORKSPACE\gdal-build
      - name: setup build env
        shell: pwsh
        run: |
            Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
            Install-Module Pscx -AllowClobber
            Install-Module VSSetup -Scope CurrentUser
            if($env:VS_VER -eq "2019")
            {
            }
            else
            {
                Import-VisualStudioVars -VisualStudioVersion $env:VS_VER -Architecture $env:ARCHITECTURE
            }
      - name: build proj
        shell: pwsh
        run: |
          echo "ARCH_FLAGS = $env:ARCH_FLAGS"
          cd $env:GITHUB_WORKSPACE\proj-build
          $env:PROJ_INSTALL_DIR="$env:GITHUB_WORKSPACE\proj-install"
          $env:CMAKE_INSTALL_PREFIX="-DCMAKE_INSTALL_PREFIX=" + $env:PROJ_INSTALL_DIR
          $env:PROJ_NETWORK="ON"
          $env:PATH="$env:GITHUB_WORKSPACE;$env:PATH"
          mkdir build
          mkdir $env:PROJ_INSTALL_DIR
          cd build
          $env:VCPKG_PLATFORM="$env:TARGETPLATFORM"+"-windows"
          vcpkg install sqlite3:$env:VCPKG_PLATFORM
          Invoke-WebRequest "https://sqlite.org/2018/sqlite-tools-win32-x86-3250100.zip" -OutFile "sqlite-tools-win32-x86-3250100.zip"
          7z x sqlite-tools-win32-x86-3250100.zip
          copy sqlite-tools-win32-x86-3250100/sqlite3.exe $env:GITHUB_WORKSPACE
          cmake -G $env:VS_VERSION `
            -A $env:CMAKE_ARCHITECTURE .. `
            $env:CMAKE_INSTALL_PREFIX `
            -DBUILD_TESTING=OFF `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_TOOLCHAIN_FILE=c:/vcpkg/scripts/buildsystems/vcpkg.cmake `
            -DBUILD_SHARED_LIBS=ON `
            -DENABLE_CURL=ON `
            -DCURL_INCLUDE_DIR=$env:SDK_PREFIX\include\curl `
            -DCURL_LIBRARY=$env:SDK_PREFIX\lib\libcurl_imp.lib `
            -DENABLE_TIFF=ON `
            -DTIFF_INCLUDE_DIR=$env:SDK_PREFIX\include `
            -DTIFF_LIBRARY_RELEASE=$env:SDK_PREFIX\lib\tiff.lib `
            -DBUILD_PROJSYNC=ON
          cmake --build . --config Release --target install
          dir $env:PROJ_INSTALL_DIR
  build:
    needs: deps
    name: Build Wheels
    runs-on: windows-latest
    strategy:
      matrix:
        targetplatform: [x64]
        python-version: [3.7]
    env:
      SDK: release-1911
      GDAL_VERSION: 3.2.2
      PROJ_VERSION: 7.2.1
    steps:
      - uses: actions/checkout@v2
        with:
          ref: 'add-win-workflow'
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.targetplatform }}
      - name: setup environment
        shell: pwsh
        run: |
            if("${{ matrix.targetplatform }}" -eq "x64") {$env:SDK_ARCH="-x64"} else {$env:SDK_ARCH=""}
            $env:SDK_PREFIX="$env:GITHUB_WORKSPACE\sdk\$env:SDK$env:SDK_ARCH"
            echo "SDK_ARCH=$env:SDK_ARCH" >> $env:GITHUB_ENV
            echo "SDK_PREFIX=$env:SDK_PREFIX" >> $env:GITHUB_ENV
            
      - name: get cache dir
        id: get-cache-dir
        run: echo "::set-output name=dir::$env:GITHUB_WORKSPACE\sdk"
      - name: cache deps
        uses: actions/cache@v2
        id: cache-deps
        with:
          path: |
            ${{ steps.get-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.targetplatform }}-v4
      - name: wheel
        shell: pwsh
        run: |
            cd $env:GITHUB_WORKSPACE
            $env:INCLUDE="$env:SDK_PREFIX\include"
            $env:LIB="$env:SDK_PREFIX\lib"
            $env:LINK="$env:SDK_PREFIX\lib\gdal_i.lib"
            pip install wheel delvewheel
            $env:PACKAGE_DATA="YES"
            $env:GDAL_DATA="$env:SDK_PREFIX\bin\gdal-data"
            $env:PROJ_LIB="$env:SDK_PREFIX\bin\proj6\share"
            write-host $env:PACKAGE_DATA
            write-host $env:GDAL_DATA
            write-host $env:PROJ_LIB
            pip wheel --no-deps .
            $env:PATH="$env:SDK_PREFIX\bin;$env:PATH"
            $wheel = get-ChildItem rasterio*whl | Select-Object -Expand Name
            delvewheel repair -v --add-path $env:SDK_PREFIX\bin --no-dll="vcruntime140_1.dll;concrt140.dll;msvcp140.dll" $wheel
            pip install -U wheelhouse/$wheel
      - name: upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: rasterio-wheel-py${{ matrix.python-version}}-${{ matrix.targetplatform }}
          path: wheelhouse/rasterio*.whl
      - name: test
        continue-on-error: true
        run: |
            pip install -Ur requirements-dev.txt
            pip freeze
            mkdir tmp
            cd tmp
            Copy-Item  -Path "..\tests" -Destination "." -Recurse
            dir tests
            $env:PROJ_NETWORK="ON"
            python -m pytest -vv tests -m "not gdalbin" -k "not test_ensure_env_decorator_sets_gdal_data_prefix and not test_tiled_dataset_blocksize_guard and not test_untiled_dataset_blocksize and not test_positional_calculation_byindex and not test_transform_geom_polygon"
